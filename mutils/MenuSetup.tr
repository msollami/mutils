Menu["Mathematica", 
{
	Menu["\.14", 
	{
		MenuItem["About Mathematica...", "AboutBoxDialog"],
		Delimiter
	}],
	Menu["File", 
	{
		Menu["New",
		{
			MenuItem["Notebook", "New", MenuKey["n", Modifiers->{"Command"}]],
			MenuItem["Slide Show...", FrontEndExecute[{FrontEnd`NotebookOpen[FrontEnd`FindFileOnPath["SlideShowChooser.nb", "PalettePath"]]}]],
			MenuItem["Template Notebook", KernelExecute[NotebookTemplating`CreateTemplateNotebook[]], MenuEvaluator->"System", Method -> "Queued"],
			MenuItem["Testing Notebook", KernelExecute[Block[{$ContextPath}, Needs["MUnit`"]; MUnit`PaletteNewTestNotebook[]]], MenuEvaluator->"System"],
			MenuItem["Demonstration", KernelExecute[FrontEnd`Private`PutDemonstrationsTemplate[]], MenuEvaluator -> "System"],
			Delimiter,
			MenuItem["Styled Notebook...", FrontEndExecute[{FrontEnd`NotebookOpen[FrontEnd`FindFileOnPath["StylesheetChooser.nb", "PalettePath"]]}]],
			Delimiter,
			MenuItem["Package", "NewPackage"],
			MenuItem["Text File", "NewText"]
		}],
		MenuItem["Open", "MenuListOpenItems", MenuAnchor->True],
		Menu["Open Recent",
		{
			MenuItem["First Favorite File", "MenuListNotebooksMenu", MenuAnchor->True]
		}],
		AlternateItems[{
			MenuItem["Close", "Close", MenuKey["w", Modifiers->{"Command"}]],
			MenuItem["Close All", "CloseAll", MenuKey["w", Modifiers->{"Command","Option"}]]
		}],
		Delimiter,
		MenuItem["Save", "MenuListSaveItems", MenuAnchor->True],
		MenuItem["Save Selection As...", "SelectionSaveSpecial", RemoveMask->{"NoLocalFileAccess"}],
		MenuItem["Revert...", "Revert"],
		Delimiter,
		Menu["CDF Preview",
		{
			MenuItem["Preview", "MenuListCDFPreview", MenuAnchor->True]
		}, RemoveMask->{"NoLocalFileAccess"}],
		Menu["CDF Export",
		{
			MenuItem["Web Embeddable...", "DeployEmbedded"],
			MenuItem["Standalone...", "DeployStandalone"]
		}, RemoveMask->{"NoLocalFileAccess"}],
		Delimiter,
		MenuItem["Install...", FrontEndExecute[{FrontEnd`NotebookOpen[
			FrontEnd`FindFileOnPath["InstallDialog.nb", "PrivatePathsSystemResources"]]}], RemoveMask->{"NoLocalFileAccess"}],
		Delimiter,
		Menu["Printing Settings",
		{
			MenuItem["Page Setup...", "SystemPrintOptionsDialog"],
			MenuItem["Printing Options...", "PrintOptionsDialog"],
			MenuItem["Headers and Footers...", KernelExecute[FE`headersFootersDialog[]], MenuEvaluator -> "System"],
			MenuItem["Show Page Breaks", ShowPageBreaks->Toggle, Scope->NotebookDefault],
			Delimiter,
			Menu["Printing Environment", 
			{
				MenuItem["Styles", "MenuListPrintingStyleEnvironments", MenuAnchor->True]
			}]
		}],
		MenuItem["Print...", "PrintDialog", MenuKey["p", Modifiers->{"Command"}]],
		MenuItem["Print Selection...", "PrintSelectionDialog", MenuKey["P", Modifiers->{"Command", "Shift"}]]
	}],
	Menu["Edit", 
	{
		MenuItem["Undo", "Undo", MenuKey["z", Modifiers->{"Command"}]],
		MenuItem["Redo", "Redo", MenuKey["z", Modifiers->{"Command", "Shift"}]],
		Delimiter,
		MenuItem["Cut", "Cut", MenuKey["x", Modifiers->{"Command"}]],
		MenuItem["Copy", "Copy", MenuKey["c", Modifiers->{"Command"}]],
		Menu["Copy As",
		{
			MenuItem["Plain Text", FrontEnd`CopySpecial["PlainText"], MenuKey["C", Modifiers->{"Command", "Shift"}]],
			MenuItem["Input Text", FrontEnd`CopySpecial["InputText"]],
			MenuItem["LaTeX",
				KernelExecute[ToExpression["FrontEnd`CopyAsTeX[]"]],
				MenuEvaluator -> "System"],			
			MenuItem["MathML", 
				KernelExecute[ToExpression["FrontEnd`CopyAsMathML[]"]],
				MenuEvaluator -> "System"],
			Delimiter,
			MenuItem["Cell Expression", FrontEnd`CopySpecial["CellExpression"]],
			MenuItem["Notebook Expression", FrontEnd`CopySpecial["NotebookExpression"]],
			Delimiter,
			MenuItem["PDF", FrontEnd`CopySpecial["PDF"]],
			MenuItem["Bitmap", FrontEnd`CopySpecial["PNG"]]
		}],
		MenuItem["Paste", FrontEnd`Paste[Automatic], MenuKey["v", Modifiers->{"Command"}]],
		MenuItem["Clear", "Clear", MenuKey["X", Modifiers->{"Command", "Shift"}]],
		Delimiter,
		MenuItem["Extend Selection", "ExpandSelection", MenuKey[".", Modifiers->{"Control"}]],
		MenuItem["Select All", "SelectAll", MenuKey["a", Modifiers->{"Command"}]],
		MenuItem["Check Balance", "Balance", MenuKey["B", Modifiers->{"Command", "Shift"}]],
		Delimiter,
		MenuItem["Un/Comment Selection", KernelExecute[FE`toggleComment[]], MenuKey["/", Modifiers->{"Command"}], MenuEvaluator -> "System", Method -> "Queued"],
		MenuItem["Complete Selection", FrontEnd`CompleteSelection[True], MenuKey["k", Modifiers->{"Command"}]],
		MenuItem["Make Template", "TemplateSelection", MenuKey["K", Modifiers->{"Command", "Shift"}]],
		Delimiter,
		Menu["Find",
		{
			MenuItem["Find...", KernelExecute[If[CurrentValue["PluginEnabled"], FrontEndTokenExecute[InputNotebook[], "FindExpression"], FrontEnd`DialogOpen["Find.nb", True]]], MenuEvaluator -> "System", MenuKey["f", Modifiers->{"Command"}]],
			MenuItem["Find Next", "FindNextMatch", MenuKey["g", Modifiers->{"Command"}]],
			MenuItem["Find Previous", "FindPreviousMatch", MenuKey["G", Modifiers->{"Command", "Shift"}]],
			MenuItem["Use Selection for Find", "SelectionSetFind", MenuKey["e", Modifiers->{"Command"}]]
		}],
		MenuItem["Check Spelling...", "FindNextMisspelling", MenuKey[";", Modifiers->{"Command"}]]
	}],
	Menu["Insert", 
	{
		MenuItem["Input from Above", FrontEnd`DuplicatePreviousInput[After], MenuKey["l", Modifiers->{"Command"}]],
		MenuItem["Output from Above", FrontEnd`DuplicatePreviousOutput[After], MenuKey["L", Modifiers->{"Command", "Shift"}]],
		Delimiter,
		MenuItem["Cell with Same Style", "SimilarCellBelow", MenuKey["Return", Modifiers->{"Option"}]],
		Delimiter,
		MenuItem["Inline Free-form Input",
			KernelExecute[AlphaIntegration`LinguisticAssistant[InputNotebook[]]], 
			MenuKey["=", Modifiers->{"Control"}], MenuEvaluator -> "Local"],
		Delimiter,
		MenuItem["Special Character...", FrontEndExecute[{FrontEnd`NotebookOpen["SpecialCharacters.nb"]}]],
		MenuItem["Color...", "ColorSelectorDialog"],
		Menu["Citation",
		{
			MenuItem["Bibliographical Note...", "InsertBibNote"],
			MenuItem["Delete Bibliographical Note", "DeleteBibReference"],
			MenuItem["Edit Bibliographical Note...", "EditBibNote"],
			Delimiter,
			MenuItem["Set / Change Note Style...", "SetBibNoteStyle"],
			MenuItem["Rebuild Notes", "RebuildBibAndNotes"]
		}, RemoveMask->{"NoLocalFileAccess"}],
		Menu["Typesetting", 
		{
			MenuItem["End Subexpression", "MoveExpressionEnd", MenuKey["Space", Modifiers->{"Control"}]],
			Delimiter,
			MenuItem["Superscript", "Superscript", MenuKey["6", Modifiers->{"Control"}]],
			MenuItem["Subscript", "Subscript", MenuKey["-", Modifiers->{"Control"}]],
			MenuItem["Above", "Above", MenuKey["7", Modifiers->{"Control"}]],
			MenuItem["Below", "Below", MenuKey["4", Modifiers->{"Control"}]],
			MenuItem["Opposite Position", "Otherscript", MenuKey["5", Modifiers->{"Control"}]],
			Delimiter,
			MenuItem["Matching []", "InsertMatchingBrackets", MenuKey["]", Modifiers->{"Command", "Option"}]],
			MenuItem["Matching {}", "InsertMatchingBraces", MenuKey["}", Modifiers->{"Command", "Option"}]],
			MenuItem["Matching ()", "InsertMatchingParentheses", MenuKey[")", Modifiers->{"Command", "Option"}]],
			Delimiter,
			MenuItem["Fraction", "Fraction", MenuKey["/", Modifiers->{"Control"}]],
			MenuItem["Radical", "Radical", MenuKey["2", Modifiers->{"Control"}]],
			Delimiter,
			MenuItem["Start Inline Cell", "CreateInlineCell", MenuKey["9", Modifiers->{"Control"}]],
			MenuItem["End Inline Cell", "MoveNextCell", MenuKey["0", Modifiers->{"Control"}]],
			MenuItem["Add Frame", FrontEndExecute[{
				FrontEnd`NotebookApply[FrontEnd`InputNotebook[],
						BoxData[FrameBox["\[SelectionPlaceholder]"]]]}]],
			Delimiter,
			MenuItem["Nudge Left", "NudgeLeft", MenuKey["Left", Modifiers->{"Control"}]],
			MenuItem["Nudge Right", "NudgeRight", MenuKey["Right", Modifiers->{"Control"}]],
			MenuItem["Nudge Down", "NudgeDown", MenuKey["Down", Modifiers->{"Control"}]],
			MenuItem["Nudge Up", "NudgeUp", MenuKey["Up", Modifiers->{"Control"}]],
			MenuItem["Remove Adjustments", "RemoveAdjustments"]
		}],
		Menu["Table/Matrix",
		{
			MenuItem["New...", "CreateGridBoxDialog"],
			Delimiter,
			MenuItem["Add Row", "NewRow", MenuKey["Return", Modifiers->{"Control"}]],
			MenuItem["Add Column", "NewColumn", MenuKey[",", Modifiers->{"Control"}]],
			Delimiter,
			MenuItem["Make Spanning", "MakeSelectionSpan"],
			MenuItem["Split Spanning", "MakeSelectionNotSpan"]
		}],
		Menu["Horizontal Line",
		{
			MenuItem["None", CellFrame->Inherited, Scope->SelectionCell],
			Delimiter,
			MenuItem["Thin Line Above", CellFrame->{{0,0},{0,0.5}}, Scope->SelectionCell],
			MenuItem["Medium Line Above", CellFrame->{{0,0},{0,2}}, Scope->SelectionCell],
			MenuItem["Thick Line Above", CellFrame->{{0,0},{0,3}}, Scope->SelectionCell],
			Delimiter,
			MenuItem["Thin Line Below", CellFrame->{{0,0},{0.5,0}}, Scope->SelectionCell],
			MenuItem["Medium Line Below", CellFrame->{{0,0},{2,0}}, Scope->SelectionCell],
			MenuItem["Thick Line Below", CellFrame->{{0,0},{3,0}}, Scope->SelectionCell],
			Delimiter,
			MenuItem["Paste Thin Line Object", FrontEndExecute[{
					FrontEnd`NotebookWrite[FrontEnd`InputNotebook[], 
						Cell["", "Text", 
							Editable->False,
							Selectable->False,
							CellElementSpacings->{"CellMinHeight"->1},
							ShowCellBracket->False,
							CellMargins->{{0, 0}, {1, 1}},
							CellSize->{Inherited, 3},
							CellFrame->{{0,0},{0,0.5}},
							CellFrameMargins->0,
							CellFrameColor->RGBColor[0, 0, 1]], 
						After]
				}]],
			MenuItem["Paste Medium Line Object", FrontEndExecute[{
					FrontEnd`NotebookWrite[FrontEnd`InputNotebook[], 
						Cell["", "Text", 
							Editable->False,
							Selectable->False,
							CellElementSpacings->{"CellMinHeight"->1},
							ShowCellBracket->False,
							CellMargins->{{0, 0}, {1, 1}},
							CellSize->{Inherited, 4},
							CellFrame->{{0,0},{0,2}},
							CellFrameMargins->0,
							CellFrameColor->RGBColor[0, 0, 1]], After]
				}]],
			MenuItem["Paste Thick Line Object", FrontEndExecute[{
					FrontEnd`NotebookWrite[FrontEnd`InputNotebook[], 
						Cell["", "Text", 
							Editable->False,
							Selectable->False,
							CellElementSpacings->{"CellMinHeight"->1},
							ShowCellBracket->False,
							CellMargins->{{0, 0}, {1, 1}},
							CellSize->{Inherited, 5},
							CellFrame->{{0,0},{0,3}},
							CellFrameMargins->0,
							CellFrameColor->RGBColor[0, 0, 1]], After]
				}]]
		}],
		MenuItem["File Path...", "FileNameDialog", RemoveMask->{"NoLocalFileAccess"}],
		Delimiter,
		Menu["Picture",
		{
			MenuItem["From File...", "ImportPictures"],
			MenuItem["New Graphic", "InsertNewGraphic", MenuKey["1", Modifiers->{"Control"}]]
		}],
		MenuItem["File...", "Import", RemoveMask->{"NoLocalFileAccess"}],
		Delimiter,
		MenuItem["Hyperlink...", "CreateHyperlinkDialog", MenuKey["H", Modifiers->{"Command", "Shift"}]],
		MenuItem["Automatic Numbering...", "CreateCounterBoxDialog"],
		Delimiter,
     		MenuItem["Page Break", "InsertSplitBreak"]
	}],
	Menu["Format", 
	{
		Menu["Style", 
		{
			LinkedItems[{
				MenuItem["Start Cell Style Names", "MenuListStyles", MenuAnchor->True]
			}],
			Delimiter,
			AlternateItems[{
				MenuItem["Other...", "StyleOther", MenuKey["0", Modifiers->{"Command"}]],
				MenuItem["Other...", "StyleOther", Scope->SelectionCell, MenuKey["0", Modifiers->{"Command","Option"}]]
			}]
		}],
		MenuItem["Clear Formatting", "ClearCellOptions", MenuKey["Backspace", Modifiers->{"Command", "Shift"}]],
		Delimiter,
		Menu["Stylesheet", 
		{
			LinkedItems[{
				MenuItem["Styles", "MenuListStyleDefinitions", MenuAnchor->True]
			}]
		}],
		Menu["Screen Environment",
		{
			LinkedItems[{
				MenuItem["Styles", "MenuListScreenStyleEnvironments", MenuAnchor->True]
			}]
		}],
		MenuItem["Edit Stylesheet...", "EditStyleDefinitions"],
		Delimiter,
		AlternateItems[{
			MenuItem["Option Inspector...", "OptionsDialog", Scope->Selection, MenuKey["O", Modifiers->{"Command", "Shift"}]],
			MenuItem["Option Inspector...", "OptionsDialog", Scope->Selection, MenuKey["O", Modifiers->{"Command", "Shift", "Option"}]]
		}],
		Delimiter,
		MenuItem["Show Fonts...", "FontPanel", MenuKey["t", Modifiers->{"Command"}]],
		Menu["Face", 
		{
			MenuItem["Plain", "PlainFont"],
			MenuItem["Bold", FontWeight->Toggle, MenuKey["b", Modifiers->{"Command"}]],
			MenuItem["Italic", FontSlant->Toggle, MenuKey["i", Modifiers->{"Command"}]],
			MenuItem["Underline", FrontEnd`FontVariationsUnderline->Toggle]
		}],
		Menu["Size", 
		{
			MenuItem["Larger", FontSize->Larger, MenuKey["=", Modifiers->{"Command"}]],
			MenuItem["Smaller", FontSize->Smaller, MenuKey["-", Modifiers->{"Command"}]],
			Delimiter,
			LinkedItems[{
				MenuItem["9 Point", FontSize->9],
				MenuItem["10 Point", FontSize->10],
				MenuItem["12 Point", FontSize->12],
				MenuItem["14 Point", FontSize->14],
				MenuItem["16 Point", FontSize->16],
				MenuItem["18 Point", FontSize->18],
				MenuItem["24 Point", FontSize->24],
				MenuItem["36 Point", FontSize->36],
				MenuItem["72 Point", FontSize->72]
			}],
			Delimiter,
			MenuItem["Other...", "FontSizeDialog"]
		}],
		Menu["Text Color", 
		{
			MenuItem["Palette...", "FontColorDialog"],
			Delimiter,
			LinkedItems[{
				MenuItem["Black",	FontColor->GrayLevel[0]],
				MenuItem["Gray",	FontColor->GrayLevel[0.5]],
				MenuItem["White",	FontColor->GrayLevel[1]],
				Delimiter,
				MenuItem["Blue",	FontColor->RGBColor[0, 0, 1]],
				MenuItem["Brown",	FontColor->RGBColor[0.6, 0.4, 0.2]],
				MenuItem["Cyan",	FontColor->RGBColor[0, 1, 1]],
				MenuItem["Green",	FontColor->RGBColor[0, 1, 0]],
				MenuItem["Magenta",	FontColor->RGBColor[1, 0, 1]],
				MenuItem["Orange",	FontColor->RGBColor[1, 0.5, 0]],
				MenuItem["Pink",	FontColor->RGBColor[1, 0.5, 0.5]],
				MenuItem["Purple",	FontColor->RGBColor[0.5, 0, 0.5]],
				MenuItem["Red",		FontColor->RGBColor[1, 0, 0]],
				MenuItem["Yellow",	FontColor->RGBColor[1, 1, 0]]
			}]
		}],
		Menu["Background Color", 
		{
			MenuItem["Palette...", "BackgroundDialog"],
			Delimiter,
			LinkedItems[{
				MenuItem["None",		Background->None],
				Delimiter,
				MenuItem["Black",		Background->GrayLevel[0]],
				MenuItem["Gray",		Background->GrayLevel[0.5]],
				MenuItem["Light Gray",	Background->GrayLevel[0.85]],
				MenuItem["White",		Background->GrayLevel[1]],
				Delimiter,
				MenuItem["Light Blue",	Background->RGBColor[0.87, 0.94, 1]],
				MenuItem["Light Brown",	Background->RGBColor[0.94, 0.91, 0.88]],
				MenuItem["Light Cyan",	Background->RGBColor[0.9, 1, 1]],
				MenuItem["Light Green",	Background->RGBColor[0.88, 1, 0.88]],
				MenuItem["Light Magenta",Background->RGBColor[1, 0.9, 1]],
				MenuItem["Light Orange",Background->RGBColor[1, 0.9, 0.8]],
				MenuItem["Light Pink",	Background->RGBColor[1, 0.925, 0.925]],
				MenuItem["Light Purple",Background->RGBColor[0.94, 0.88, 0.94]],
				MenuItem["Light Red",	Background->RGBColor[1, 0.85, 0.85]],
				MenuItem["Light Yellow",Background->RGBColor[1, 1, 0.85]],
				Delimiter,
				MenuItem["Orange",		Background->RGBColor[1, 0.5, 0]],
				MenuItem["Pink",		Background->RGBColor[1, 0.5, 0.5]],
				MenuItem["Yellow",		Background->RGBColor[1, 1, 0]]
			}]
		}],
		Menu["Cell Dingbat",
		{
			LinkedItems[{
				MenuItem["None", CellDingbat->None, Scope->SelectionCell],
				Delimiter,
				MenuItem["Filled Square",		CellDingbat->"\[FilledSquare]",			Scope->SelectionCell],
				MenuItem["Gray Square",			CellDingbat->"\[GraySquare]",			Scope->SelectionCell],
				MenuItem["Empty Square",		CellDingbat->"\[EmptySquare]",			Scope->SelectionCell],
				MenuItem["Dotted Square",		CellDingbat->"\[DottedSquare]",			Scope->SelectionCell],
				MenuItem["Filled Small Square",	CellDingbat->"\[FilledSmallSquare]",	Scope->SelectionCell],
				MenuItem["Empty Small Square",	CellDingbat->"\[EmptySmallSquare]",		Scope->SelectionCell],
				Delimiter,
				MenuItem["Filled Circle",		CellDingbat->"\[FilledCircle]",			Scope->SelectionCell],
				MenuItem["Gray Circle",			CellDingbat->"\[GrayCircle]",			Scope->SelectionCell],
				MenuItem["Empty Circle",		CellDingbat->"\[EmptyCircle]",			Scope->SelectionCell],
				MenuItem["Filled Small Circle",	CellDingbat->"\[FilledSmallCircle]",	Scope->SelectionCell],
				MenuItem["Empty Small Circle",	CellDingbat->"\[EmptySmallCircle]",		Scope->SelectionCell],
				Delimiter,
				MenuItem["Filled Diamond",		CellDingbat->"\[FilledDiamond]",		Scope->SelectionCell],
				MenuItem["Empty Diamond",		CellDingbat->"\[EmptyDiamond]",			Scope->SelectionCell],
				MenuItem["Filled Up Triangle",	CellDingbat->"\[FilledUpTriangle]",		Scope->SelectionCell],
				MenuItem["Empty Up Triangle",	CellDingbat->"\[EmptyUpTriangle]",		Scope->SelectionCell],
				MenuItem["Filled Down Triangle",CellDingbat->"\[FilledDownTriangle]",	Scope->SelectionCell],
				MenuItem["Empty Down Triangle",	CellDingbat->"\[EmptyDownTriangle]",	Scope->SelectionCell],
				Delimiter,
				MenuItem["Watch",				CellDingbat->"\[WatchIcon]",			Scope->SelectionCell],
				MenuItem["Filled Star",			CellDingbat->"\[FivePointedStar]",		Scope->SelectionCell],
				MenuItem["Happy Smiley",		CellDingbat->"\[HappySmiley]",			Scope->SelectionCell],
				MenuItem["Neutral Smiley",		CellDingbat->"\[NeutralSmiley]",		Scope->SelectionCell],
				MenuItem["Sad Smiley",			CellDingbat->"\[SadSmiley]",			Scope->SelectionCell],
				MenuItem["Light Bulb",			CellDingbat->"\[LightBulb]",			Scope->SelectionCell],
				MenuItem["Wolf",				CellDingbat->"\[Wolf]",					Scope->SelectionCell],
				Delimiter,
				MenuItem["Club Suit",			CellDingbat->"\[ClubSuit]",				Scope->SelectionCell],
				MenuItem["Diamond Suit",		CellDingbat->"\[DiamondSuit]",			Scope->SelectionCell],
				MenuItem["Heart Suit",			CellDingbat->"\[HeartSuit]",			Scope->SelectionCell],
				MenuItem["Spade Suit",			CellDingbat->"\[SpadeSuit]",			Scope->SelectionCell]
			}]
		}],
		Delimiter,
		Menu["Text Alignment", 
		{
			LinkedItems[{
				MenuItem["Align Left", TextAlignment->Left, Scope->SelectionCell],
				MenuItem["Align at 25%", TextAlignment->-0.5, Scope->SelectionCell],
				MenuItem["Align Center", TextAlignment->Center, Scope->SelectionCell],
				MenuItem["Align at 75%", TextAlignment->0.5, Scope->SelectionCell],
				MenuItem["Align Right", TextAlignment->Right, Scope->SelectionCell],
				MenuItem["On AlignmentMarker", TextAlignment->AlignmentMarker, Scope->SelectionCell]
			}]
		}],
		Menu["Text Justification", 
		{
			LinkedItems[{
				MenuItem["None", TextJustification->0.0, Scope->SelectionCell],
				MenuItem["25%", TextJustification->0.25, Scope->SelectionCell],
				MenuItem["50%", TextJustification->0.5, Scope->SelectionCell],
				MenuItem["75%", TextJustification->0.75, Scope->SelectionCell],
				MenuItem["Full", TextJustification->1.0, Scope->SelectionCell]
			}]
		}],
		Menu["Word Wrapping", 
		{
			LinkedItems[{
				MenuItem["Don't Word Wrap", PageWidth->Infinity, Scope->SelectionCell],
				MenuItem["Wrap at Paper Width", PageWidth->PaperWidth, Scope->SelectionCell],
				MenuItem["Wrap at Window Width", PageWidth->WindowWidth, Scope->SelectionCell]
			}]
		}]
	}],
	Menu["Cell", 
	{
		Menu["Convert To", 
		{
			MenuItem["InputForm", "SelectionConvert"->InputForm, MenuKey["I", Modifiers->{"Command", "Shift"}]],
			MenuItem["Raw InputForm", "SelectionConvert"->RawInputForm, MenuKey["R", Modifiers->{"Command", "Shift"}]],
			MenuItem["OutputForm", "SelectionConvert"->OutputForm],
			MenuItem["First Convert to BoxForm", "MenuListConvertFormatTypes", MenuAnchor->True],
			Delimiter,
			MenuItem["Bitmap", "SelectionConvert"->"Bitmap"],
			Delimiter,
			MenuItem["Text Display", "SelectionDisplayAs"->TextForm],
			MenuItem["InputForm Display", "SelectionDisplayAs"->InputForm],
			MenuItem["First Display As BoxForm", "MenuListDisplayAsFormatTypes", MenuAnchor->True]
		}],
		Delimiter,
		Menu["Cell Properties",
		{
			MenuItem["Open", CellOpen->Toggle, Scope->SelectionCell],
			MenuItem["Editable", Editable->Toggle, Scope->SelectionCell],
			MenuItem["Evaluatable", Evaluatable->Toggle, Scope->SelectionCell],
			MenuItem["Deployed", Deployed->Toggle, Scope->SelectionCell],
			Delimiter,
			MenuItem["Initialization Cell", InitializationCell->Toggle, Scope->SelectionCell],
			MenuItem["Initialization Group", FrontEnd`InitializationGroup->Toggle, Scope->SelectionCell]
		}],
		Menu["Cell Tags",
		{
			MenuItem["Add/Remove Cell Tags...", "CellTagsEditDialog", MenuKey["j", Modifiers->{"Command"}]],
			Menu["Find Cell Tag", 
			{
				MenuItem["Start CellTags Listing", "MenuListCellTags", MenuAnchor->True]
			}],
			MenuItem["Show Cell Tags", ShowCellTags->Toggle, Scope->NotebookDefault],
			MenuItem["Cell Tags from In/Out Names", "CellLabelsToTags"]
		}],
		Menu["Grouping", 
		{
			MenuItem["Group Cells/Group Together", "CellGroup", MenuKey["g", Modifiers->{"Control"}]],
			MenuItem["Ungroup Cells/Group Normally", "CellUngroup", MenuKey["G", Modifiers->{"Control", "Shift"}]],
			Delimiter,
			LinkedItems[{
				MenuItem["Manual Grouping", CellGrouping->Manual, Scope->NotebookDefault],
				MenuItem["Automatic Grouping", CellGrouping->Automatic, Scope->NotebookDefault]
			}],
			Delimiter,
			MenuItem["Open All Subgroups", "SelectionOpenAllGroups", MenuKey["{", Modifiers->{"Command", "Shift"}]],
			MenuItem["Close All Subgroups", "SelectionCloseAllGroups", MenuKey["}", Modifiers->{"Command", "Shift"}]],
			MenuItem["Close Unselected Cells", "SelectionCloseUnselectedCells"],
			MenuItem["Open/Close Group", "OpenCloseGroup", MenuKey["'", Modifiers->{"Command"}]]
		}],
		Delimiter,
		MenuItem["Divide Cell", "CellSplit", MenuKey["D", Modifiers->{"Command", "Shift"}]],
		MenuItem["Merge Cells", "CellMerge", MenuKey["M", Modifiers->{"Command", "Shift"}]],
		Delimiter,
		MenuItem["Notebook History...",
				FrontEndExecute[{FrontEnd`NotebookOpen[
					FrontEnd`FindFileOnPath["HistoryOverview.nb", "PrivatePathsSystemResources"]]}]],
		Delimiter,
		MenuItem["Delete All Output", "DeleteGeneratedCells"],
		Delimiter,
		MenuItem["Show Expression", "ToggleShowExpression", MenuKey["E", Modifiers->{"Command", "Shift"}]]
	}],
	Menu["Graphics",
	{
		MenuItem["New Graphic", "InsertNewGraphic", MenuKey["1", Modifiers->{"Control"}]],
		MenuItem["Drawing Tools",
				FrontEndExecute[{FrontEnd`NotebookOpen[
					FrontEnd`FindFileOnPath["DrawingTools.nb", "PrivatePathsSystemResources"]]}],
				MenuKey["t", Modifiers->{"Control"}]],
		Delimiter,
		MenuItem["Alignment Guides Enabled", AlignmentGuidesEnabled->Toggle, Scope->GlobalPreferences],
		Delimiter,
		MenuItem["Group", "Group"],
		MenuItem["Ungroup", "Ungroup"],
		Delimiter,
		MenuItem["Move to Front", "MoveToFront"],
		MenuItem["Move to Back",  "MoveToBack"],
		MenuItem["Move Forward", "MoveForward"],
		MenuItem["Move Backward",  "MoveBackward"],
		Delimiter,
		MenuItem["Align Left Sides", "AlignLeftSides"],
		MenuItem["Align Centers Vertically", "AlignCentersVertically"],
		MenuItem["Align Right Sides", "AlignRightSides"],
		Delimiter,
		MenuItem["Align Bottoms", "AlignBottoms"],
		MenuItem["Align Centers Horizontally", "AlignCentersHorizontally"],
		MenuItem["Align Tops", "AlignTops"],
		Delimiter,
		MenuItem["Distribute Left Sides", "DistributeLeftSides"],
		MenuItem["Distribute Centers Horizontally", "DistributeCentersHorizontally"],
		MenuItem["Distribute Right Sides", "DistributeRightSides"],
		MenuItem["Distribute Space Horizontally", "DistributeSpaceHorizontally"],
		Delimiter,
		MenuItem["Distribute Tops", "DistributeTops"],
		MenuItem["Distribute Centers Vertically", "DistributeCentersVertically"],
		MenuItem["Distribute Bottoms", "DistributeBottoms"],
		MenuItem["Distribute Space Vertically", "DistributeSpaceVertically"]
	}],
	Menu["Evaluation",
	{
		MenuItem["Evaluate Cells", "HandleShiftReturn", MenuKey["Return", Modifiers->{"Shift"}]],
		MenuItem["Evaluate in Place", FrontEnd`Evaluate[All], MenuKey["Return", Modifiers->{"Command"}]],
		MenuItem["Evaluate in Subsession", "SubsessionEvaluateCells", MenuKey["Return", Modifiers->{"Shift", "Option"}]],
		Delimiter,
		MenuItem["Evaluate Notebook", "EvaluateNotebook"],
		MenuItem["Evaluate Initialization Cells", "EvaluateInitialization"],
		Delimiter,
		MenuItem["Dynamic Updating Enabled", "ToggleDynamicUpdating"],
		MenuItem["Convert Dynamic to Literal", 
			FrontEndExecute[{FrontEnd`NotebookDynamicToLiteral[
				FrontEnd`NotebookSelection[FrontEnd`InputNotebook[]]]}]],
		Delimiter,
		MenuItem["Debugger", FrontEnd`DebuggerSettingsDebuggerEnabled->Toggle, Scope->GlobalPreferences],
		Menu["Debugger Controls", 
		{
			Delimiter,
			MenuItem["Halt", "EvaluatorHalt", MenuKey["H", Modifiers->{"Control", "Shift"}]],
			MenuItem["Continue", "DebuggerContinue", MenuKey["C", Modifiers->{"Control", "Shift"}]],
			MenuItem["Step", "DebuggerStep", MenuKey["S", Modifiers->{"Control", "Shift"}]],
			MenuItem["Step In", "DebuggerStepIn", MenuKey["T", Modifiers->{"Control", "Shift"}]],
			MenuItem["Step Out", "DebuggerStepOut", MenuKey["U", Modifiers->{"Control", "Shift"}]],
			MenuItem["Finish", "DebuggerFinish", MenuKey["F", Modifiers->{"Control", "Shift"}]],
			Delimiter,
			MenuItem["Toggle Breakpoint", "DebuggerToggleBreakpoint", MenuKey["B", Modifiers->{"Control", "Shift"}]],
			Delimiter,
			MenuItem["Show Debugger Tools Window", FrontEnd`DebuggerSettingsShowTools->Toggle, Scope->GlobalPreferences],
			MenuItem["Show Stack Window", FrontEnd`DebuggerSettingsShowStack->Toggle, Scope->GlobalPreferences],
			MenuItem["Show Breakpoints Window", FrontEnd`DebuggerSettingsShowBreakpoints->Toggle, Scope->GlobalPreferences]
		}],
		Delimiter,
		MenuItem["Abort Evaluation", FrontEnd`EvaluatorAbort[Automatic], MenuKey[".", Modifiers->{"Command"}]],
		MenuItem["Remove from Evaluation Queue", "RemoveFromEvaluationQueue", MenuKey[".", Modifiers->{"Command", "Shift"}]],
		MenuItem["Find Currently Evaluating Cell", "FindEvaluatingCell"],
		Delimiter,
		MenuItem["Kernel Configuration Options...", "ModifyEvaluatorNames", RemoveMask->{"NoLocalFileAccess"}],
		MenuItem["Parallel Kernel Configuration...", FrontEndExecute[{
			FrontEnd`SetOptions[FrontEnd`$FrontEnd, FrontEnd`PreferencesSettings -> {"Page" -> "Parallel"}], 
			FrontEnd`FrontEndToken["PreferencesDialog"]}]],
		MenuItem["Parallel Kernel Status...", KernelExecute[Parallel`Palette`menuStatus[]], MenuEvaluator -> Automatic],
		Delimiter,
		Menu["Default Kernel", 
		{
			MenuItem["First Default Kernel", "MenuListGlobalEvaluators", MenuAnchor->True]
		}, RemoveMask->{"NoLocalFileAccess"}],
		Menu["Notebook's Kernel", 
		{
			MenuItem["First Notebook's Kernel", "MenuListNotebookEvaluators", MenuAnchor->True]
		}, RemoveMask->{"NoLocalFileAccess"}],
		Menu["Notebook's Default Context", 
		{
			MenuItem["Global`", CellContext->"Global`", Scope->NotebookDefault],
			MenuItem["Other...", "CellContextDialog"],
			Delimiter,
			MenuItem["Unique to This Notebook", CellContext->Notebook, Scope->NotebookDefault],
			MenuItem["Unique to Each Cell Group", CellContext->CellGroup, Scope->NotebookDefault]
		}],
		Delimiter,
		Menu["Start Kernel", 
		{
			MenuItem["First Start Kernel", "MenuListStartEvaluators", MenuAnchor->True]
		}],
		Menu["Quit Kernel", 
		{
			MenuItem["First Quit Kernel", "MenuListQuitEvaluators", MenuAnchor->True]
		}]
	}],
	Menu["Palettes", 
	{
		MenuItem["First Favorite Palette", "MenuListPalettesMenu", MenuAnchor->True]
	}],
	Menu["Window", 
	{
		MenuItem["Minimize", "WindowMiniaturize", MenuKey["m", Modifiers->{"Command"}]],
		MenuItem["Zoom", "ZoomWindow", MenuKey["/", Modifiers->{"Command", "Option"}]],
		Delimiter,
		Menu["Magnification", 
		{
			MenuItem["50%", Magnification->0.50, Scope->NotebookDefault],
			MenuItem["75%", Magnification->0.75, Scope->NotebookDefault],
			MenuItem["100%", Magnification->1.00, Scope->NotebookDefault],
			MenuItem["125%", Magnification->1.25, Scope->NotebookDefault],
			MenuItem["150%", Magnification->1.50, Scope->NotebookDefault],
			MenuItem["200%", Magnification->2.00, Scope->NotebookDefault],
			MenuItem["300%", Magnification->3.00, Scope->NotebookDefault]
		}],
		Menu["Toolbar", 
		{
			MenuItem["Ruler", ToggleOptionListElement[{"WindowToolbars", "RulerBar"}], Scope->NotebookDefault],
			MenuItem["Formatting", ToggleOptionListElement[{"WindowToolbars", "EditBar"}], Scope->NotebookDefault],
			MenuItem["Templating", KernelExecute[NotebookTemplating`CreateTemplateNotebook[InputNotebook[]]], MenuEvaluator -> "System"],
			MenuItem["Testing", KernelExecute[Block[{$ContextPath}, Needs["MUnit`"]; MUnit`addDockedCellConvertNotebook[]]], MenuEvaluator -> "System"]
		}],
		Delimiter,
		MenuItem["Wolfram Cloud Activity Monitor", "WolframCloudActivityMonitor"],
		Delimiter,
		MenuItem["Stack Windows", "StackWindows"],
		MenuItem["Tile Windows Wide", "TileWindowsWide"],
		MenuItem["Tile Windows Tall", "TileWindowsTall"],
		MenuItem["Full Screen",
                 FrontEndExecute[FrontEnd`Value[FEPrivate`NotebookToggleFullScreen[]]],
                 MenuKey["f", Modifiers -> {"Command", "Control"}]],
		Delimiter,
		MenuItem["Bring All to Front", "AllWindowsFront"],
		Delimiter,
		MenuItem["Start Windows Listing", "MenuListWindows", MenuAnchor->True]
	}],
	HelpMenu["Help", 
	{

    MenuItem["No Dingbat",
FrontEndExecute[{
FrontEndTokenExecute["SelectionCloseAllGroups"],
KernelExecute[
$mycell = FrontEndExecute[FrontEnd`NotebookRead[FrontEnd`EvaluationNotebook[]]];
$mycell = SollamiTools`setCellDingbat[$mycell, noDingbat];
FrontEndExecute[FrontEnd`NotebookWrite[FrontEnd`EvaluationNotebook[], $mycell]];
]
}],
MenuKey["n", Modifiers -> {"Option", "Shift"}],
MenuEvaluator -> "Local"],

MenuItem["Easy Dingbat",
FrontEndExecute[{
FrontEndTokenExecute["SelectionCloseAllGroups"],
KernelExecute[
$mycell = FrontEndExecute[FrontEnd`NotebookRead[FrontEnd`EvaluationNotebook[]]];
$mycell = SollamiTools`setCellDingbat[$mycell, quickDingbat];
FrontEndExecute[FrontEnd`NotebookWrite[FrontEnd`EvaluationNotebook[], $mycell]];
]
}],
MenuKey["e", Modifiers -> {"Option", "Shift"}],
MenuEvaluator -> "Local"],

MenuItem["Critical Dingbat",
FrontEndExecute[{
FrontEndTokenExecute["SelectionCloseAllGroups"],
KernelExecute[
$mycell = FrontEndExecute[FrontEnd`NotebookRead[FrontEnd`EvaluationNotebook[]]];
$mycell = SollamiTools`setCellDingbat[$mycell, criticalDingbat];
FrontEndExecute[FrontEnd`NotebookWrite[FrontEnd`EvaluationNotebook[], $mycell]];
]
}],
MenuKey["c", Modifiers -> {"Option", "Shift"}],
MenuEvaluator -> "Local"],

MenuItem["Toggle Opener",
FrontEndExecute[{
FrontEndTokenExecute["SelectionCloseAllGroups"],
KernelExecute[
(*$mycell = FrontEndExecute[FrontEnd`NotebookRead[FrontEnd`EvaluationNotebook[]]];*)
If[Options[NotebookSelection[EvaluationNotebook[]],
"WholeCellGroupOpener"][[1, 2]],
SetOptions[NotebookSelection[EvaluationNotebook[]],
"WholeCellGroupOpener" -> False],
SetOptions[NotebookSelection[EvaluationNotebook[]],
"WholeCellGroupOpener" -> True]]
(*$mycell = SollamiTools`setCellDingbat[$mycell, criticalDingbat];
FrontEndExecute[FrontEnd`NotebookWrite[FrontEnd`EvaluationNotebook[], $mycell]];*)
]
}],
MenuKey["w", Modifiers -> {"Control"}],
MenuEvaluator -> "Local"],


MenuItem["Google",
FrontEndExecute[{
FrontEndTokenExecute["ExpandSelection"],
FrontEndTokenExecute["ExpandSelection"],
KernelExecute[
$myContent = FrontEndExecute[FrontEnd`NotebookRead[FrontEnd`InputNotebook[]]];
$myContent = $myContent[[1]];
Print[$myContent];
SollamiTools`googleSearch[$myContent];
]}],
MenuKey["l", Modifiers -> {"Control", "Shift"}], MenuEvaluator -> "Local"],

        MenuItem["Copy Cell Style",
			FrontEndExecute[{FrontEnd`SelectionMove[FrontEnd`EvaluationNotebook[], All,	FrontEnd`EvaluationCell],
				KernelExecute[
					$mystyle = FrontEndExecute[FrontEnd`NotebookRead[FrontEnd`EvaluationNotebook[]]];
					$mystyle = $mystyle[[2]];
				]}],
          MenuKey["c", Modifiers -> {"Command", "Shift"}], MenuEvaluator -> "Local"],

		MenuItem["Paste Cell Style",
			FrontEndExecute[{FrontEnd`SelectionMove[FrontEnd`EvaluationNotebook[], All,			FrontEnd`EvaluationCell],
				KernelExecute[
					$mycell = FrontEndExecute[FrontEnd`NotebookRead[FrontEnd`EvaluationNotebook[]]];
					$mycell = $mycell[[1]];
					FrontEndExecute[FrontEnd`NotebookWrite[FrontEnd`EvaluationNotebook[],Cell[$mycell,$mystyle]]];
				]
		 	}],MenuKey["v", Modifiers -> {"Command", "Shift"}], MenuEvaluator -> "Local"],

		
		MenuItem["Wolfram Documentation", "OpenHelpLink"],
		MenuItem["Find Selected Function", FrontEnd`SelectionHelpDialog[True], MenuKey["F", Modifiers->{"Command","Shift"}]],
		MenuItem["Find Selected Function", FrontEnd`SelectionHelpDialog[True], MenuKey["Help", Modifiers->{}], Visible->False],
		MenuItem["Find Selected Function", FrontEnd`SelectionHelpDialog[True], MenuKey["F1", Modifiers->{}], Visible->False],
		Delimiter,
		MenuItem["Wolfram Account Settings...", "WolframCloudAccountSettings"],
		MenuItem["Wolfram Cloud Account Management", "MenuListWolframCloudAccountMenu", MenuAnchor->True],
		Delimiter,
		MenuItem["Wolfram Website...", KernelExecute[
			FE`hyperlinkCoded["http://www.wolfram.com", "source=menubar"]], MenuEvaluator -> "System"],
		MenuItem["Demonstrations...", FrontEndExecute[{
			FrontEnd`NotebookLocate[{URL["http://demonstrations.wolfram.com"], None}]}]],
		Delimiter,
		MenuItem["Internet Connectivity...", FrontEndExecute[{
			FrontEnd`SetOptions[FrontEnd`$FrontEnd, FrontEnd`PreferencesSettings -> {"Page" -> "InternetConnectivity"}], 
			FrontEnd`FrontEndToken["PreferencesDialog"]}]],
		MenuItem["Give Feedback...", KernelExecute[
			FE`hyperlinkCoded["http://www.wolfram.com/support/contact/email", "source=menubar", "topic=feedback"]], MenuEvaluator -> "System"],
		MenuItem["Register Software...", KernelExecute[
			FE`hyperlinkCoded["https://user.wolfram.com/portal/ProductRegistration", "source=menubar", "topic=register"]], MenuEvaluator -> "System"],
		MenuItem["Enter Activation Key...", KernelExecute[SetOptions[
		    FrontEnd`DialogOpen["ActivationDialog.nb"], TaggingRules -> {
		      "ActivationState" -> "Online", "ErrorMessage" -> None, "Unsecured" -> False, "Reactivate" -> True}]], MenuEvaluator -> "System"],
		Delimiter,
		MenuItem["Why the Beep?...", "ExplainBeepDialog"],
		MenuItem["Why the Coloring?...", FrontEndExecute[{
			FrontEnd`NotebookOpen[FrontEnd`FindFileOnPath["WhyTheColoring.nb", "PrivatePathsSystemResources"]]}]],
		Delimiter,
		MenuItem["Welcome Screen...", "WelcomeDialog"]
	}]
}]


